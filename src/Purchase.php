<?php
/**
 * Created by PhpStorm.
 * User: arevkina
 * Date: 03.10.2017
 * Time: 12:50
 */

namespace Skytech;
include 'example.php';
include 'order.php';


class Purchase
{
    private $merid; /** Merchant Id */
    private $merchanttranid; /** @var unique transaction id generated TWEC PG   */
    private $version; /** Version No */
    private $status_code;
    private $status_Description;
    private $orderid;
    private $sessionId;
    private $language; /** Interface language (EN, RU, UK, ..) */
    private $transdatetime;
    private $visualamount;  /**   Operation amount for customer*/
    private $purchaseamount; /** Operation amount*/
    private $currency;   /** Operation currency (840, 810 )*/
    private $description; /** Operation desciption */
    private $customerid;  /** */
    private $firstname;
    private $lastname;
    private $middlename;
    private $emailaddr;
    private $country;
    private $city;
    private $address;
    private $phone;
    private $zip;
    private $brand;
    private $name;
    private $threedsstatus;
    //
    private $pan;
    private $expmonth;
    private $expyear;
    private $fee;
    private $transactiontype;
    private $aprovalcode;
    private $approvalcodestr;
    private $threedsverification;
    private $rezultoperation;
    private $responcecode;
    private $responcedescription;
    private $responce;
    private $acqfee;
    private $responce_f;
    private $xid; /** @var  unique trans id generated by merchant */
    private $calculatedcavv;
    private $rrn;
    private $rrn2;
    private $hexcavv;
    /**
     * Purchase constructor.
     */
    public function __construct(Order $order)
    {
        $this->language = $order->getLanguage();
        $this->orderid = $order->getOrderid();
        $this->transdatetime = $order->getOrderdate();
        //$this->brand = $order->getbrand;
        $this->purchaseamount = $order->getAmount();
        $this->description = $order->getDescription();
        $this->currency = $order->getCurrency();
        $this->firstname = $order->getFirstname();
        $this->lastname = $order->getLastname();
        $this->middlename = $order->getMiddlename();
        $this->emailaddr = $order->getEmailaddr();
        $this->country = $order->getCountry();
        $this->city = $order->getCity();
        $this->address = $order->getAddress();
        $this->phone = $order->getPhone();
        $this->zip = $order->getZip();
        $this->transactiontype = $order->getTransactiontype();
        $this->xid = $order->getXid();
    }
    public function SetStatus($stat)
    {
        $this->status_code = $stat;
    }
    public function SetMerchantId($merchantId)
    {
        $this->merid = $merchantId;
    }
    public function GetAuthorisationData($xmlresponce)
    {
        $authresp = new SimpleXMLElement($xmlresponce);
        $this->responcecode = $authresp->message->ResponseCode ;
        $this->responcedescription = $authresp->message->ResponseDescription;
        $this->approvalcode = $authresp->message->ApprovalCode;
        $this->approvalcodestr = $authresp->message->ApprovalCodeScr;
        $this->threedsverification = $authresp->message->ThreeDSVerificaion;
        $this->threedsstatus = $authresp->message->ThreeDSStatus;
        $this->fee = $authresp->message->Fee;
        $this->merchanttranid = $authresp->message->MerchantTranID;
    }
    public function __set($name, $value)
    {
        // TODO: Implement __set() method.
        echo "__set, property - {$name} is not exists \n";
    }
    public function __get($name)
    {
        // TODO: Implement __get() method.
        echo "__get, property - {$name} is not exists \n";
    }

}

